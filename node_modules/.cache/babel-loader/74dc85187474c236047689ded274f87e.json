{"ast":null,"code":"var _jsxFileName = \"/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/src/contexts/AuthContext.tsx\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nconst [session, setSession] = useState();\nuseEffect(() => {\n  const unsubcribe = auth.onAuthStateChanged(user => {\n    if (user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from google Account.');\n      }\n\n      setSession({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  });\n  return () => {\n    unsubcribe();\n  };\n}, []);\n\nasync function signInWithGoogle() {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  const result = await auth.signInWithPopup(provider);\n\n  if (result.user) {\n    const {\n      displayName,\n      photoURL,\n      uid\n    } = result.user;\n\n    if (!displayName || !photoURL) {\n      throw new Error('Missing information from google Account.');\n    }\n\n    setSession({\n      id: uid,\n      name: displayName,\n      avatar: photoURL\n    });\n  }\n}\n\nexport function AuthContextProvider(props) {\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      session,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","session","setSession","unsubcribe","onAuthStateChanged","user","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","AuthContextProvider","props","children"],"mappings":";AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,sBAA/B;;AAgBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAEP,MAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,EAAtC;AAEAD,SAAS,CAAC,MAAM;AACd,QAAMO,UAAU,GAAGL,IAAI,CAACM,kBAAL,CAAwBC,IAAI,IAAG;AAChD,QAAGA,IAAH,EAAQ;AACN,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAgCH,IAAtC;;AAEA,UAAG,CAACC,WAAD,IAAgB,CAACC,QAApB,EAA6B;AAC3B,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDP,MAAAA,UAAU,CAAC;AACTQ,QAAAA,EAAE,EAAEF,GADK;AAETG,QAAAA,IAAI,EAAEL,WAFG;AAGTM,QAAAA,MAAM,EAACL;AAHE,OAAD,CAAV;AAKD;AACF,GAdkB,CAAnB;AAeA,SAAO,MAAM;AACXJ,IAAAA,UAAU;AACX,GAFD;AAGD,CAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,eAAeU,gBAAf,GAAiC;AAC/B,QAAMC,QAAQ,GAAG,IAAIf,QAAQ,CAACD,IAAT,CAAciB,kBAAlB,EAAjB;AAEA,QAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACmB,eAAL,CAAqBH,QAArB,CAArB;;AAEE,MAAGE,MAAM,CAACX,IAAV,EAAe;AACb,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,QAAgCQ,MAAM,CAACX,IAA7C;;AAEA,QAAG,CAACC,WAAD,IAAgB,CAACC,QAApB,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDP,IAAAA,UAAU,CAAC;AACTQ,MAAAA,EAAE,EAAEF,GADK;AAETG,MAAAA,IAAI,EAAEL,WAFG;AAGTM,MAAAA,MAAM,EAACL;AAHE,KAAD,CAAV;AAKD;AACF;;AAGH,OAAO,SAASW,mBAAT,CAA6BC,KAA7B,EAA6D;AAChE,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAElB,MAAAA,OAAF;AAAWY,MAAAA;AAAX,KAA7B;AAAA,cACKM,KAAK,CAACC;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KANeF,mB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\"\nimport { auth, firebase } from \"../services/firebase\"\n\ntype User = {\n    id:string;\n    name:string;\n    avatar:string;\n}\n  type AuthContextType = {\n    session: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n}\n  \ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType)\n\nconst [session, setSession] = useState<User>();\n\nuseEffect(() => {\n  const unsubcribe = auth.onAuthStateChanged(user =>{\n    if(user){\n      const { displayName, photoURL, uid} = user\n\n      if(!displayName || !photoURL){\n        throw new Error('Missing information from google Account.')\n      }\n\n      setSession({\n        id: uid,\n        name: displayName,\n        avatar:photoURL\n      })\n    }\n  })\n  return () => {\n    unsubcribe();\n  }\n}, [])\n\nasync function signInWithGoogle(){\n  const provider = new firebase.auth.GoogleAuthProvider()\n\n  const result = await auth.signInWithPopup(provider)\n\n    if(result.user){\n      const { displayName, photoURL, uid} = result.user\n\n      if(!displayName || !photoURL){\n        throw new Error('Missing information from google Account.')\n      }\n\n      setSession({\n        id: uid,\n        name: displayName,\n        avatar:photoURL\n      })\n    }\n  }\n\n\nexport function AuthContextProvider(props: AuthContextProviderProps){\n    return(\n        <AuthContext.Provider value={{ session, signInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}