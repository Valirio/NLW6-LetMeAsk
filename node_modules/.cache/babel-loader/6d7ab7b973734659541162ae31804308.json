{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\nexport function UseRoom(roomId) {\n  _s();\n\n  const {\n    session\n  } = useAuth();\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\n        var _value$likes, _value$likes2;\n\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighlighted: value.isHighlighted,\n          isAnswered: value.isAnswered,\n          likeCount: Object.values((_value$likes = value.likes) !== null && _value$likes !== void 0 ? _value$likes : {}).length,\n          hasLiked: Object.values((_value$likes2 = value.likes) !== null && _value$likes2 !== void 0 ? _value$likes2 : {}).some(like => like.authorId === (session === null || session === void 0 ? void 0 : session.id))\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestion);\n      console.table(parsedQuestion);\n      console.table(databaseRoom.questions);\n    });\n  }, [roomId]);\n  return {\n    questions,\n    title\n  };\n}\n\n_s(UseRoom, \"lTZepzIchbhs51wYlADgY+hDi8I=\", false, function () {\n  return [useAuth];\n});\n\n_c = UseRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseRoom\");","map":{"version":3,"sources":["/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/src/hooks/useRoom.ts"],"names":["useEffect","useState","database","useAuth","UseRoom","roomId","session","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestion","Object","entries","map","key","value","id","content","author","isHighlighted","isAnswered","likeCount","values","likes","length","hasLiked","some","like","authorId","console","table"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AA2BA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAgC;AAAA;;AAEnC,QAAK;AAAEC,IAAAA;AAAF,MAAcH,OAAO,EAA1B;AACC,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAkB,EAAlB,CAA1C;AACD,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,OAAO,GAAGT,QAAQ,CAACU,GAAT,CAAc,SAAQP,MAAO,EAA7B,CAAhB;AAEAM,IAAAA,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,IAAI,IAAI;AAAA;;AACxB,YAAMC,YAAY,GAAGD,IAAI,CAACE,GAAL,EAArB;AACA,YAAMC,iBAAoC,4BAAGF,YAAY,CAACR,SAAhB,yEAA6B,EAAvE;AAEA,YAAMW,cAAc,GAAGC,MAAM,CAACC,OAAP,CAAeH,iBAAf,EAAkCI,GAAlC,CAAsC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAAA;;AAC3E,eAAO;AACHC,UAAAA,EAAE,EAAEF,GADD;AAEHG,UAAAA,OAAO,EAAEF,KAAK,CAACE,OAFZ;AAGHC,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAHX;AAIHC,UAAAA,aAAa,EAAEJ,KAAK,CAACI,aAJlB;AAKHC,UAAAA,UAAU,EAAEL,KAAK,CAACK,UALf;AAMHC,UAAAA,SAAS,EAAEV,MAAM,CAACW,MAAP,iBAAcP,KAAK,CAACQ,KAApB,uDAA6B,EAA7B,EAAiCC,MANzC;AAOHC,UAAAA,QAAQ,EAAEd,MAAM,CAACW,MAAP,kBAAcP,KAAK,CAACQ,KAApB,yDAA6B,EAA7B,EAAiCG,IAAjC,CAAsCC,IAAI,IAAIA,IAAI,CAACC,QAAL,MAAkB9B,OAAlB,aAAkBA,OAAlB,uBAAkBA,OAAO,CAAEkB,EAA3B,CAA9C;AAPP,SAAP;AASH,OAVsB,CAAvB;AAWAd,MAAAA,QAAQ,CAACK,YAAY,CAACN,KAAd,CAAR;AACAD,MAAAA,YAAY,CAACU,cAAD,CAAZ;AACAmB,MAAAA,OAAO,CAACC,KAAR,CAAcpB,cAAd;AACAmB,MAAAA,OAAO,CAACC,KAAR,CAAcvB,YAAY,CAACR,SAA3B;AACH,KAnBD;AAoBH,GAvBQ,EAuBN,CAACF,MAAD,CAvBM,CAAT;AAyBA,SAAO;AAAEE,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAP;AACH;;GAhCeL,O;UAEOD,O;;;KAFPC,O","sourcesContent":["import { useEffect, useState } from \"react\"\n\nimport { database } from \"../services/firebase\"\nimport { useAuth } from \"./useAuth\"\n\n\ntype FirebaseQuestions = Record<string, {\n    author:{\n        name:string;\n        avatar:string;\n    }\n    content:string;\n    isAnswered:boolean;\n    isHighligted: boolean;\n    likes: Record<string, {\n        authorId: string;\n    }>\n}>\n\ntype QuestionsType = {\n    id:string;\n    author: {\n        name:string;\n        avatar:string;\n    }\n    content:string;\n    isAnswered:boolean;\n    isHighligted: boolean;\n}\n\nexport function UseRoom(roomId: string){\n\n    const{ session } = useAuth();\n     const [questions, setQuestions] = useState<QuestionsType[]>([])\n    const [title, setTitle] = useState('')\n\n    useEffect(() => {\n        const roomRef = database.ref(`rooms/${roomId}`)\n\n        roomRef.on('value', room => {\n            const databaseRoom = room.val()\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\n\n            const parsedQuestion = Object.entries(firebaseQuestions).map(([key, value]) => {\n                return {\n                    id: key,\n                    content: value.content,\n                    author: value.author,\n                    isHighlighted: value.isHighlighted,\n                    isAnswered: value.isAnswered,\n                    likeCount: Object.values(value.likes ?? {}).length,\n                    hasLiked: Object.values(value.likes ?? {}).some(like => like.authorId === session?.id)\n                }\n            })\n            setTitle(databaseRoom.title)\n            setQuestions(parsedQuestion)\n            console.table(parsedQuestion)\n            console.table(databaseRoom.questions)\n        })\n    }, [roomId])\n\n    return { questions, title}\n}"]},"metadata":{},"sourceType":"module"}