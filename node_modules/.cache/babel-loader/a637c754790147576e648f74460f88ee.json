{"ast":null,"code":"import _regeneratorRuntime from\"/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{createContext,useEffect,useState}from\"react\";import{auth,firebase}from\"../services/firebase\";import{jsx as _jsx}from\"react/jsx-runtime\";export var AuthContext=/*#__PURE__*/createContext({});export function AuthContextProvider(props){var _useState=useState(),_useState2=_slicedToArray(_useState,2),session=_useState2[0],setSession=_useState2[1];useEffect(function(){var unsubcribe=auth.onAuthStateChanged(function(user){if(user){var displayName=user.displayName,photoURL=user.photoURL,uid=user.uid;if(!displayName||!photoURL){throw new Error('Missing information from google Account.');}setSession({id:uid,name:displayName,avatar:photoURL});}});return function(){unsubcribe();};},[]);function signInWithGoogle(){return _signInWithGoogle.apply(this,arguments);}function _signInWithGoogle(){_signInWithGoogle=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var provider,result,_result$user,displayName,photoURL,uid;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:provider=new firebase.auth.GoogleAuthProvider();_context.next=3;return auth.signInWithPopup(provider);case 3:result=_context.sent;if(!result.user){_context.next=9;break;}_result$user=result.user,displayName=_result$user.displayName,photoURL=_result$user.photoURL,uid=_result$user.uid;if(!(!displayName||!photoURL)){_context.next=8;break;}throw new Error('Missing information from google Account.');case 8:setSession({id:uid,name:displayName,avatar:photoURL});case 9:case\"end\":return _context.stop();}}},_callee);}));return _signInWithGoogle.apply(this,arguments);}return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{session:session,signInWithGoogle:signInWithGoogle},children:props.children});}","map":{"version":3,"sources":["/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","session","setSession","unsubcribe","onAuthStateChanged","user","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","result","children"],"mappings":"ghBAAA,OAASA,aAAT,CAAmCC,SAAnC,CAA8CC,QAA9C,KAA8D,OAA9D,CACA,OAASC,IAAT,CAAeC,QAAf,KAA+B,sBAA/B,C,2CAiBA,MAAO,IAAMC,CAAAA,WAAW,cAAGL,aAAa,CAAC,EAAD,CAAjC,CAEP,MAAO,SAASM,CAAAA,mBAAT,CAA6BC,KAA7B,CAA6D,eAClCL,QAAQ,EAD0B,wCACzDM,OADyD,eAChDC,UADgD,eAGhER,SAAS,CAAC,UAAM,CACZ,GAAMS,CAAAA,UAAU,CAAGP,IAAI,CAACQ,kBAAL,CAAwB,SAAAC,IAAI,CAAG,CAChD,GAAGA,IAAH,CAAQ,IACEC,CAAAA,WADF,CACgCD,IADhC,CACEC,WADF,CACeC,QADf,CACgCF,IADhC,CACeE,QADf,CACyBC,GADzB,CACgCH,IADhC,CACyBG,GADzB,CAGN,GAAG,CAACF,WAAD,EAAgB,CAACC,QAApB,CAA6B,CAC3B,KAAM,IAAIE,CAAAA,KAAJ,CAAU,0CAAV,CAAN,CACD,CAEDP,UAAU,CAAC,CACTQ,EAAE,CAAEF,GADK,CAETG,IAAI,CAAEL,WAFG,CAGTM,MAAM,CAACL,QAHE,CAAD,CAAV,CAKD,CACF,CAdkB,CAAnB,CAgBA,MAAO,WAAM,CACXJ,UAAU,GACX,CAFD,CAGD,CApBM,CAoBJ,EApBI,CAAT,CAHgE,QAyB/CU,CAAAA,gBAzB+C,0JAyB9D,6LACQC,QADR,CACmB,GAAIjB,CAAAA,QAAQ,CAACD,IAAT,CAAcmB,kBAAlB,EADnB,uBAGuBnB,CAAAA,IAAI,CAACoB,eAAL,CAAqBF,QAArB,CAHvB,QAGQG,MAHR,mBAKOA,MAAM,CAACZ,IALd,sCAM4CY,MAAM,CAACZ,IANnD,CAMcC,WANd,cAMcA,WANd,CAM2BC,QAN3B,cAM2BA,QAN3B,CAMqCC,GANrC,cAMqCA,GANrC,MAQS,CAACF,WAAD,EAAgB,CAACC,QAR1B,+BASc,IAAIE,CAAAA,KAAJ,CAAU,0CAAV,CATd,QAYMP,UAAU,CAAC,CACTQ,EAAE,CAAEF,GADK,CAETG,IAAI,CAAEL,WAFG,CAGTM,MAAM,CAACL,QAHE,CAAD,CAAV,CAZN,sDAzB8D,mDA6ChE,mBACI,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAE,CAAEN,OAAO,CAAPA,OAAF,CAAWY,gBAAgB,CAAhBA,gBAAX,CAA7B,UACKb,KAAK,CAACkB,QADX,EADJ,CAKH","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\"\nimport { auth, firebase } from \"../services/firebase\"\n\ntype User = {\n    id:string;\n    name:string;\n    avatar:string;\n}\n\ntype AuthContextType = {\n    session: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n}\n  \ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType)\n\nexport function AuthContextProvider(props: AuthContextProviderProps){\n    const [session, setSession] = useState<User>();\n\n    useEffect(() => {\n        const unsubcribe = auth.onAuthStateChanged(user =>{\n          if(user){\n            const { displayName, photoURL, uid} = user\n      \n            if(!displayName || !photoURL){\n              throw new Error('Missing information from google Account.')\n            }\n      \n            setSession({\n              id: uid,\n              name: displayName,\n              avatar:photoURL\n            })\n          }\n        })\n        \n        return () => {\n          unsubcribe();\n        }\n      }, [])\n\n      async function signInWithGoogle(){\n        const provider = new firebase.auth.GoogleAuthProvider()\n      \n        const result = await auth.signInWithPopup(provider)\n      \n          if(result.user){\n            const { displayName, photoURL, uid} = result.user\n      \n            if(!displayName || !photoURL){\n              throw new Error('Missing information from google Account.')\n            }\n      \n            setSession({\n              id: uid,\n              name: displayName,\n              avatar:photoURL\n            })\n          }\n        }\n\n    return(\n        <AuthContext.Provider value={{ session, signInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}