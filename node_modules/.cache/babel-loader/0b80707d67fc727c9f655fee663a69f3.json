{"ast":null,"code":"var _jsxFileName = \"/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/src/contexts/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [session, setSession] = useState();\n  useEffect(() => {\n    const unsubcribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from google Account.');\n        }\n\n        setSession({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubcribe();\n    };\n  }, []);\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from google Account.');\n      }\n\n      setSession({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      session,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"5mtdwkMs24cJM0x4JrQejwwvbbs=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/braatz/Desktop/www/rocketeseat/nlw6ToGether/letmeask/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvider","props","session","setSession","unsubcribe","onAuthStateChanged","user","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,sBAA/B;;AAiBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,SAASM,mBAAT,CAA6BC,KAA7B,EAA6D;AAAA;;AAChE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,EAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAGP,IAAI,CAACQ,kBAAL,CAAwBC,IAAI,IAAG;AAChD,UAAGA,IAAH,EAAQ;AACN,cAAM;AAAEC,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAgCH,IAAtC;;AAEA,YAAG,CAACC,WAAD,IAAgB,CAACC,QAApB,EAA6B;AAC3B,gBAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDP,QAAAA,UAAU,CAAC;AACTQ,UAAAA,EAAE,EAAEF,GADK;AAETG,UAAAA,IAAI,EAAEL,WAFG;AAGTM,UAAAA,MAAM,EAACL;AAHE,SAAD,CAAV;AAKD;AACF,KAdkB,CAAnB;AAeA,WAAO,MAAM;AACXJ,MAAAA,UAAU;AACX,KAFD;AAGD,GAnBM,EAmBJ,EAnBI,CAAT;;AAqBE,iBAAeU,gBAAf,GAAiC;AAC/B,UAAMC,QAAQ,GAAG,IAAIjB,QAAQ,CAACD,IAAT,CAAcmB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMpB,IAAI,CAACqB,eAAL,CAAqBH,QAArB,CAArB;;AAEE,QAAGE,MAAM,CAACX,IAAV,EAAe;AACb,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAgCQ,MAAM,CAACX,IAA7C;;AAEA,UAAG,CAACC,WAAD,IAAgB,CAACC,QAApB,EAA6B;AAC3B,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAEDP,MAAAA,UAAU,CAAC;AACTQ,QAAAA,EAAE,EAAEF,GADK;AAETG,QAAAA,IAAI,EAAEL,WAFG;AAGTM,QAAAA,MAAM,EAACL;AAHE,OAAD,CAAV;AAKD;AACF;;AAEL,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEN,MAAAA,OAAF;AAAWY,MAAAA;AAAX,KAA7B;AAAA,cACKb,KAAK,CAACkB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAjDenB,mB;;KAAAA,mB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\"\nimport { auth, firebase } from \"../services/firebase\"\n\ntype User = {\n    id:string;\n    name:string;\n    avatar:string;\n}\n\ntype AuthContextType = {\n    session: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n}\n  \ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType)\n\nexport function AuthContextProvider(props: AuthContextProviderProps){\n    const [session, setSession] = useState<User>();\n\n    useEffect(() => {\n        const unsubcribe = auth.onAuthStateChanged(user =>{\n          if(user){\n            const { displayName, photoURL, uid} = user\n      \n            if(!displayName || !photoURL){\n              throw new Error('Missing information from google Account.')\n            }\n      \n            setSession({\n              id: uid,\n              name: displayName,\n              avatar:photoURL\n            })\n          }\n        })\n        return () => {\n          unsubcribe();\n        }\n      }, [])\n\n      async function signInWithGoogle(){\n        const provider = new firebase.auth.GoogleAuthProvider()\n      \n        const result = await auth.signInWithPopup(provider)\n      \n          if(result.user){\n            const { displayName, photoURL, uid} = result.user\n      \n            if(!displayName || !photoURL){\n              throw new Error('Missing information from google Account.')\n            }\n      \n            setSession({\n              id: uid,\n              name: displayName,\n              avatar:photoURL\n            })\n          }\n        }\n\n    return(\n        <AuthContext.Provider value={{ session, signInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}